(deftheme tomorrow-night-blue-chap
  "Created 2013-05-20.")

(custom-theme-set-variables
 'tomorrow-night-blue-chap
 '(ansi-color-names-vector (quote (vector "#ffffff" "#ff9da4" "#d1f1a9" "#ffeead" "#bbdaff" "#ebbbff" "#99ffff" "#002451")))
 '(ansi-color-faces-vector [default bold shadow italic underline bold bold-italic bold]))

(custom-theme-set-faces
 'tomorrow-night-blue-chap
 '(default ((((class color) (min-colors 89)) (:foreground "#ffffff" :background "#002451"))))
 '(cursor ((((class color) (min-colors 89)) (:background "#ff9da4"))))
 '(fixed-pitch ((t (:family "Monospace"))))
 '(variable-pitch ((t (:family "Sans Serif"))))
 '(escape-glyph ((((background dark)) (:foreground "cyan")) (((type pc)) (:foreground "magenta")) (t (:foreground "brown"))))
 '(minibuffer-prompt ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(highlight ((((class color) (min-colors 89)) (:inverse-video nil :background "#00346e"))))
 '(region ((((class color) (min-colors 89)) (:background "#003f8e"))))
 '(shadow ((((class color) (min-colors 89)) (:foreground "#7285b7"))))
 '(secondary-selection ((((class color) (min-colors 89)) (:background "#00346e"))))
 '(trailing-whitespace ((((class color) (min-colors 89)) (:foreground "#ff9da4" :inverse-video t :underline nil))))
 '(font-lock-builtin-face ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(font-lock-comment-delimiter-face ((((class color) (min-colors 89)) (:foreground "#7285b7" :slant italic))))
 '(font-lock-comment-face ((((class color) (min-colors 89)) (:foreground "#7285b7" :slant italic))))
 '(font-lock-constant-face ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(font-lock-doc-face ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(font-lock-function-name-face ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(font-lock-keyword-face ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(font-lock-negation-char-face ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(font-lock-preprocessor-face ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(font-lock-regexp-grouping-backslash ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(font-lock-regexp-grouping-construct ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(font-lock-string-face ((((class color) (min-colors 89)) (:foreground "#99ffff"))))
 '(font-lock-type-face ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(font-lock-variable-name-face ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(font-lock-warning-face ((((class color) (min-colors 89)) (:weight bold :foreground "#ff9da4"))))
 '(button ((t (:inherit (link)))))
 '(link ((((class color) (min-colors 89)) (:foreground nil :underline t))))
 '(link-visited ((default (:inherit (link))) (((class color) (background light)) (:foreground "magenta4")) (((class color) (background dark)) (:foreground "violet"))))
 '(fringe ((((class color) (min-colors 89)) (:background "#00346e"))))
 '(header-line ((((class color) (min-colors 89)) (:inherit mode-line :foreground "#ebbbff" :background nil))))
 '(tooltip ((((class color)) (:inherit (variable-pitch) :foreground "black" :background "lightyellow")) (t (:inherit (variable-pitch)))))
 '(mode-line ((((class color) (min-colors 89)) (:foreground nil :background "#00346e" :box (:line-width 1 :color "#ffffff")))))
 '(mode-line-buffer-id ((((class color) (min-colors 89)) (:foreground "#ebbbff" :background nil))))
 '(mode-line-emphasis ((((class color) (min-colors 89)) (:foreground "#ffffff" :slant italic))))
 '(mode-line-highlight ((((class color) (min-colors 89)) (:foreground "#ebbbff" :box nil :weight bold))))
 '(mode-line-inactive ((((class color) (min-colors 89)) (:inherit mode-line :foreground "#7285b7" :background "#00346e" :weight normal :box (:line-width 1 :color "#7285b7")))))
 '(isearch ((((class color) (min-colors 89)) (:foreground "#ffeead" :background "#002451" :inverse-video t))))
 '(isearch-fail ((((class color) (min-colors 89)) (:background "#002451" :inherit font-lock-warning-face :inverse-video t))))
 '(lazy-highlight ((((class color) (min-colors 89)) (:foreground "#99ffff" :background "#002451" :inverse-video t))))
 '(match ((((class color) (min-colors 89)) (:foreground "#bbdaff" :background "#002451" :inverse-video t))))
 '(next-error ((t (:inherit (region)))))
 '(query-replace ((t (:inherit (isearch)))))
 '(bold ((((class color) (min-colors 89)) (:weight bold))))
 '(bold-italic ((((class color) (min-colors 89)) (:slant italic :weight bold))))
 '(underline ((((class color) (min-colors 89)) (:underline t))))
 '(italic ((((class color) (min-colors 89)) (:slant italic))))
 '(font-lock-doc-string-face ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(success ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(error ((((class color) (min-colors 89)) (:foreground "#ff9da4"))))
 '(warning ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(flymake-warnline ((((class color) (min-colors 89)) (:underline "#ffc58f" :background "#002451"))))
 '(flymake-errline ((((class color) (min-colors 89)) (:underline "#ff9da4" :background "#002451"))))
 '(clojure-test-failure-face ((((class color) (min-colors 89)) (:background nil :inherit flymake-warnline))))
 '(clojure-test-error-face ((((class color) (min-colors 89)) (:background nil :inherit flymake-errline))))
 '(clojure-test-success-face ((((class color) (min-colors 89)) (:background nil :foreground nil :underline "#d1f1a9"))))
 '(edts-face-warning-line ((t (:background nil :inherit flymake-warnline))))
 '(edts-face-warning-mode-line ((((class color) (min-colors 89)) (:background nil :foreground "#ffc58f" :weight bold))))
 '(edts-face-error-line ((t (:background nil :inherit flymake-errline))))
 '(edts-face-error-mode-line ((((class color) (min-colors 89)) (:background nil :foreground "#ff9da4" :weight bold))))
 '(clojure-keyword ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(clojure-parens ((((class color) (min-colors 89)) (:foreground "#ffffff"))))
 '(clojure-braces ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(clojure-brackets ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(clojure-double-quote ((((class color) (min-colors 89)) (:foreground "#99ffff" :background nil))))
 '(clojure-special ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(clojure-java-call ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(rainbow-delimiters-depth-1-face ((((class color) (min-colors 89)) (:foreground "#ffffff"))))
 '(rainbow-delimiters-depth-2-face ((((class color) (min-colors 89)) (:foreground "#99ffff"))))
 '(rainbow-delimiters-depth-3-face ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(rainbow-delimiters-depth-4-face ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(rainbow-delimiters-depth-5-face ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(rainbow-delimiters-depth-6-face ((((class color) (min-colors 89)) (:foreground "#ffffff"))))
 '(rainbow-delimiters-depth-7-face ((((class color) (min-colors 89)) (:foreground "#99ffff"))))
 '(rainbow-delimiters-depth-8-face ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(rainbow-delimiters-depth-9-face ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(rainbow-delimiters-unmatched-face ((((class color) (min-colors 89)) (:foreground "#ff9da4"))))
 '(mmm-code-submode-face ((((class color) (min-colors 89)) (:background "#00346e"))))
 '(mmm-comment-submode-face ((((class color) (min-colors 89)) (:inherit font-lock-comment-face))))
 '(mmm-output-submode-face ((((class color) (min-colors 89)) (:background "#00346e"))))
 '(ido-subdir ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(ido-first-match ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(ido-only-match ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(ido-indicator ((((class color) (min-colors 89)) (:foreground "#ff9da4" :background "#002451"))))
 '(ido-virtual ((((class color) (min-colors 89)) (:foreground "#7285b7"))))
 '(which-func ((((class color) (min-colors 89)) (:foreground "#bbdaff" :background nil :weight bold))))
 '(linum ((((class color) (min-colors 89)) (:background "#00346e"))))
 '(border ((((class color) (min-colors 89)) (:background "#00346e"))))
 '(border-glyph ((((class color) (min-colors 89)) (nil))))
 '(gui-element ((((class color) (min-colors 89)) (:background "#00346e" :foreground "#ffffff"))))
 '(whitespace-trailing ((((class color) (min-colors 89)) (:foreground "#ff9da4" :inverse-video t :underline nil))))
 '(whitespace-space-after-tab ((((class color) (min-colors 89)) (:foreground "#ff9da4" :inverse-video t :underline nil))))
 '(whitespace-space-before-tab ((((class color) (min-colors 89)) (:foreground "#ff9da4" :inverse-video t :underline nil))))
 '(whitespace-empty ((((class color) (min-colors 89)) (:foreground "#ff9da4" :inverse-video t :underline nil))))
 '(whitespace-line ((((class color) (min-colors 89)) (:background nil :foreground "#ff9da4"))))
 '(whitespace-indentation ((((class color) (min-colors 89)) (:background nil :foreground "#99ffff"))))
 '(whitespace-space ((((class color) (min-colors 89)) (:background nil :foreground "#003f8e"))))
 '(whitespace-newline ((((class color) (min-colors 89)) (:background nil :foreground "#003f8e"))))
 '(whitespace-tab ((((class color) (min-colors 89)) (:background nil :foreground "#003f8e"))))
 '(whitespace-hspace ((((class color) (min-colors 89)) (:background nil :foreground "#003f8e"))))
 '(show-paren-match ((((class color) (min-colors 89)) (:background nil :foreground nil :inverse-video t))))
 '(show-paren-mismatch ((((class color) (min-colors 89)) (:background "#ebbbff" :foreground "#002451"))))
 '(paren-face-match ((((class color) (min-colors 89)) (:foreground nil :background nil :inherit show-paren-match))))
 '(paren-face-mismatch ((((class color) (min-colors 89)) (:foreground nil :background nil :inherit show-paren-mismatch))))
 '(paren-face-no-match ((((class color) (min-colors 89)) (:foreground nil :background nil :inherit show-paren-mismatch))))
 '(paren-face ((((class color) (min-colors 89)) (:foreground "#7285b7" :background nil))))
 '(sh-heredoc ((((class color) (min-colors 89)) (:foreground nil :inherit font-lock-string-face :weight normal))))
 '(sh-quoted-exec ((((class color) (min-colors 89)) (:foreground nil :inherit font-lock-preprocessor-face))))
 '(slime-highlight-edits-face ((((class color) (min-colors 89)) (:weight bold))))
 '(slime-repl-input-face ((((class color) (min-colors 89)) (:weight normal :underline nil))))
 '(slime-repl-prompt-face ((((class color) (min-colors 89)) (:underline nil :weight bold :foreground "#ebbbff"))))
 '(slime-repl-result-face ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(slime-repl-output-face ((((class color) (min-colors 89)) (:foreground "#bbdaff" :background "#002451"))))
 '(csv-separator-face ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(diff-added ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(diff-changed ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(diff-removed ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(diff-header ((((class color) (min-colors 89)) (:foreground "#99ffff" :background nil))))
 '(diff-file-header ((((class color) (min-colors 89)) (:foreground "#bbdaff" :background nil))))
 '(diff-hunk-header ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(diff-refine-added ((((class color) (min-colors 89)) (:inherit diff-added :inverse-video t))))
 '(diff-refine-removed ((((class color) (min-colors 89)) (:inherit diff-removed :inverse-video t))))
 '(ediff-even-diff-A ((((class color) (min-colors 89)) (:foreground nil :background nil :inverse-video t))))
 '(ediff-even-diff-B ((((class color) (min-colors 89)) (:foreground nil :background nil :inverse-video t))))
 '(ediff-odd-diff-A ((((class color) (min-colors 89)) (:foreground "#7285b7" :background nil :inverse-video t))))
 '(ediff-odd-diff-B ((((class color) (min-colors 89)) (:foreground "#7285b7" :background nil :inverse-video t))))
 '(eldoc-highlight-function-argument ((((class color) (min-colors 89)) (:foreground "#d1f1a9" :weight bold))))
 '(macrostep-expansion-highlight-face ((((class color) (min-colors 89)) (:inherit highlight :foreground nil))))
 '(undo-tree-visualizer-default-face ((((class color) (min-colors 89)) (:foreground "#ffffff"))))
 '(undo-tree-visualizer-current-face ((((class color) (min-colors 89)) (:foreground "#d1f1a9" :weight bold))))
 '(undo-tree-visualizer-active-branch-face ((((class color) (min-colors 89)) (:foreground "#ff9da4"))))
 '(undo-tree-visualizer-register-face ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(diredp-compressed-file-suffix ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(diredp-dir-heading ((((class color) (min-colors 89)) (:foreground nil :background nil :inherit heading))))
 '(diredp-dir-priv ((((class color) (min-colors 89)) (:foreground "#99ffff" :background nil))))
 '(diredp-exec-priv ((((class color) (min-colors 89)) (:foreground "#bbdaff" :background nil))))
 '(diredp-executable-tag ((((class color) (min-colors 89)) (:foreground "#ff9da4" :background nil))))
 '(diredp-file-name ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(diredp-file-suffix ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(diredp-flag-mark-line ((((class color) (min-colors 89)) (:background nil :inherit highlight))))
 '(diredp-ignored-file-name ((((class color) (min-colors 89)) (:foreground "#7285b7"))))
 '(diredp-link-priv ((((class color) (min-colors 89)) (:background nil :foreground "#ebbbff"))))
 '(diredp-mode-line-flagged ((((class color) (min-colors 89)) (:foreground "#ff9da4"))))
 '(diredp-mode-line-marked ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(diredp-no-priv ((((class color) (min-colors 89)) (:background nil))))
 '(diredp-number ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(diredp-other-priv ((((class color) (min-colors 89)) (:background nil :foreground "#ebbbff"))))
 '(diredp-rare-priv ((((class color) (min-colors 89)) (:foreground "#ff9da4" :background nil))))
 '(diredp-read-priv ((((class color) (min-colors 89)) (:foreground "#d1f1a9" :background nil))))
 '(diredp-symlink ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(diredp-write-priv ((((class color) (min-colors 89)) (:foreground "#ffeead" :background nil))))
 '(magit-branch ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(magit-header ((((class color) (min-colors 89)) (:inherit nil :weight bold))))
 '(magit-item-highlight ((((class color) (min-colors 89)) (:inherit highlight :background nil))))
 '(magit-log-author ((((class color) (min-colors 89)) (:foreground "#99ffff"))))
 '(magit-log-graph ((((class color) (min-colors 89)) (:foreground "#7285b7"))))
 '(magit-log-sha1 ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(magit-log-head-label-bisect-bad ((((class color) (min-colors 89)) (:foreground "#ff9da4"))))
 '(magit-log-head-label-bisect-good ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(magit-log-head-label-default ((((class color) (min-colors 89)) (:foreground "#ffeead" :box nil :weight bold))))
 '(magit-log-head-label-local ((((class color) (min-colors 89)) (:foreground "#ebbbff" :box nil :weight bold))))
 '(magit-log-head-label-remote ((((class color) (min-colors 89)) (:foreground "#ebbbff" :box nil :weight bold))))
 '(magit-log-head-label-tags ((((class color) (min-colors 89)) (:foreground "#99ffff" :box nil :weight bold))))
 '(magit-section-title ((((class color) (min-colors 89)) (:foreground "#bbdaff" :weight bold))))
 '(git-gutter:modified ((((class color) (min-colors 89)) (:foreground "#ebbbff" :weight bold))))
 '(git-gutter:added ((((class color) (min-colors 89)) (:foreground "#d1f1a9" :weight bold))))
 '(git-gutter:deleted ((((class color) (min-colors 89)) (:foreground "#ff9da4" :weight bold))))
 '(git-gutter:unchanged ((((class color) (min-colors 89)) (:background "#ffeead"))))
 '(git-gutter-fr:modified ((((class color) (min-colors 89)) (:foreground "#ebbbff" :weight bold))))
 '(git-gutter-fr:added ((((class color) (min-colors 89)) (:foreground "#d1f1a9" :weight bold))))
 '(git-gutter-fr:deleted ((((class color) (min-colors 89)) (:foreground "#ff9da4" :weight bold))))
 '(widget-button ((((class color) (min-colors 89)) (:underline t))))
 '(widget-field ((((class color) (min-colors 89)) (:background "#00346e" :box (:line-width 1 :color "#ffffff")))))
 '(compilation-column-number ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(compilation-line-number ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(compilation-message-face ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(compilation-mode-line-exit ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(compilation-mode-line-fail ((((class color) (min-colors 89)) (:foreground "#ff9da4"))))
 '(compilation-mode-line-run ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(grep-context-face ((((class color) (min-colors 89)) (:foreground "#7285b7"))))
 '(grep-error-face ((((class color) (min-colors 89)) (:foreground "#ff9da4" :weight bold :underline t))))
 '(grep-hit-face ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(grep-match-face ((((class color) (min-colors 89)) (:foreground nil :background nil :inherit match))))
 '(regex-tool-matched-face ((((class color) (min-colors 89)) (:foreground nil :background nil :inherit match))))
 '(mm/master-face ((((class color) (min-colors 89)) (:inherit region :foreground nil :background nil))))
 '(mm/mirror-face ((((class color) (min-colors 89)) (:inherit region :foreground nil :background nil))))
 '(org-agenda-structure ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(org-agenda-date ((((class color) (min-colors 89)) (:foreground "#bbdaff" :underline nil))))
 '(org-agenda-done ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(org-agenda-dimmed-todo-face ((((class color) (min-colors 89)) (:foreground "#7285b7"))))
 '(org-block ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(org-code ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(org-column ((((class color) (min-colors 89)) (:background "#00346e"))))
 '(org-column-title ((((class color) (min-colors 89)) (:inherit org-column :weight bold :underline t))))
 '(org-date ((((class color) (min-colors 89)) (:foreground "#bbdaff" :underline t))))
 '(org-document-info ((((class color) (min-colors 89)) (:foreground "#99ffff"))))
 '(org-document-info-keyword ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(org-document-title ((((class color) (min-colors 89)) (:weight bold :foreground "#ffc58f" :height 1.44))))
 '(org-done ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(org-ellipsis ((((class color) (min-colors 89)) (:foreground "#7285b7"))))
 '(org-footnote ((((class color) (min-colors 89)) (:foreground "#99ffff"))))
 '(org-formula ((((class color) (min-colors 89)) (:foreground "#ff9da4"))))
 '(org-hide ((((class color) (min-colors 89)) (:foreground "#002451" :background "#002451"))))
 '(org-link ((((class color) (min-colors 89)) (:foreground "#bbdaff" :underline t))))
 '(org-scheduled ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(org-scheduled-previously ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(org-scheduled-today ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(org-special-keyword ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(org-table ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(org-todo ((((class color) (min-colors 89)) (:foreground "#ff9da4"))))
 '(org-upcoming-deadline ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(org-warning ((((class color) (min-colors 89)) (:weight bold :foreground "#ff9da4"))))
 '(markdown-url-face ((((class color) (min-colors 89)) (:inherit link))))
 '(markdown-link-face ((((class color) (min-colors 89)) (:foreground "#bbdaff" :underline t))))
 '(hl-sexp-face ((((class color) (min-colors 89)) (:background "#00346e"))))
 '(highlight-80+ ((((class color) (min-colors 89)) (:background "#00346e"))))
 '(py-builtins-face ((((class color) (min-colors 89)) (:foreground "#ffc58f" :weight normal))))
 '(js2-warning ((((class color) (min-colors 89)) (:underline "#ffc58f"))))
 '(js2-error ((((class color) (min-colors 89)) (:foreground nil :underline "#ff9da4"))))
 '(js2-external-variable ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(js2-function-param ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(js2-instance-member ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(js2-private-function-call ((((class color) (min-colors 89)) (:foreground "#ff9da4"))))
 '(js3-warning-face ((((class color) (min-colors 89)) (:underline "#ffc58f"))))
 '(js3-error-face ((((class color) (min-colors 89)) (:foreground nil :underline "#ff9da4"))))
 '(js3-external-variable-face ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(js3-function-param-face ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(js3-jsdoc-tag-face ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(js3-jsdoc-type-face ((((class color) (min-colors 89)) (:foreground "#99ffff"))))
 '(js3-jsdoc-value-face ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(js3-jsdoc-html-tag-name-face ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(js3-jsdoc-html-tag-delimiter-face ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(js3-instance-member-face ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(js3-private-function-call-face ((((class color) (min-colors 89)) (:foreground "#ff9da4"))))
 '(coffee-mode-class-name ((((class color) (min-colors 89)) (:foreground "#ffc58f" :weight bold))))
 '(coffee-mode-function-param ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(nxml-name-face ((((class color) (min-colors 89)) (:foreground unspecified :inherit font-lock-constant-face))))
 '(nxml-attribute-local-name-face ((((class color) (min-colors 89)) (:foreground unspecified :inherit font-lock-variable-name-face))))
 '(nxml-ref-face ((((class color) (min-colors 89)) (:foreground unspecified :inherit font-lock-preprocessor-face))))
 '(nxml-delimiter-face ((((class color) (min-colors 89)) (:foreground unspecified :inherit font-lock-keyword-face))))
 '(nxml-delimited-data-face ((((class color) (min-colors 89)) (:foreground unspecified :inherit font-lock-string-face))))
 '(rng-error-face ((((class color) (min-colors 89)) (:underline "#ff9da4"))))
 '(erb-delim-face ((((class color) (min-colors 89)) (:background "#00346e"))))
 '(erb-exec-face ((((class color) (min-colors 89)) (:background "#00346e" :weight bold))))
 '(erb-exec-delim-face ((((class color) (min-colors 89)) (:background "#00346e"))))
 '(erb-out-face ((((class color) (min-colors 89)) (:background "#00346e" :weight bold))))
 '(erb-out-delim-face ((((class color) (min-colors 89)) (:background "#00346e"))))
 '(erb-comment-face ((((class color) (min-colors 89)) (:background "#00346e" :weight bold :slant italic))))
 '(erb-comment-delim-face ((((class color) (min-colors 89)) (:background "#00346e"))))
 '(message-header-other ((((class color) (min-colors 89)) (:foreground nil :background nil :weight normal))))
 '(message-header-subject ((((class color) (min-colors 89)) (:inherit message-header-other :weight bold :foreground "#ffeead"))))
 '(message-header-to ((((class color) (min-colors 89)) (:inherit message-header-other :weight bold :foreground "#ffc58f"))))
 '(message-header-cc ((((class color) (min-colors 89)) (:inherit message-header-to :foreground nil))))
 '(message-header-name ((((class color) (min-colors 89)) (:foreground "#bbdaff" :background nil))))
 '(message-header-newsgroups ((((class color) (min-colors 89)) (:foreground "#99ffff" :background nil :slant normal))))
 '(message-separator ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(jabber-chat-prompt-local ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(jabber-chat-prompt-foreign ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(jabber-chat-prompt-system ((((class color) (min-colors 89)) (:foreground "#ffeead" :weight bold))))
 '(jabber-chat-text-local ((((class color) (min-colors 89)) (:foreground "#ffeead"))))
 '(jabber-chat-text-foreign ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(jabber-chat-text-error ((((class color) (min-colors 89)) (:foreground "#ff9da4"))))
 '(jabber-roster-user-online ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(jabber-roster-user-xa ((((class color) (min-colors 89)) :foreground "#7285b7")))
 '(jabber-roster-user-dnd ((((class color) (min-colors 89)) :foreground "#ffeead")))
 '(jabber-roster-user-away ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(jabber-roster-user-chatty ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(jabber-roster-user-error ((((class color) (min-colors 89)) (:foreground "#ff9da4"))))
 '(jabber-roster-user-offline ((((class color) (min-colors 89)) (:foreground "#7285b7"))))
 '(jabber-rare-time-face ((((class color) (min-colors 89)) (:foreground "#7285b7"))))
 '(jabber-activity-face ((((class color) (min-colors 89)) (:foreground "#ebbbff"))))
 '(jabber-activity-personal-face ((((class color) (min-colors 89)) (:foreground "#99ffff"))))
 '(powerline-active1 ((t (:foreground "#ffffff" :background "#003f8e"))))
 '(powerline-active2 ((t (:foreground "#ffffff" :background "#00346e"))))
 '(outline-1 ((((class color) (min-colors 89)) (:inherit nil :foreground "#bbdaff"))))
 '(outline-2 ((((class color) (min-colors 89)) (:inherit nil :foreground "#ffeead"))))
 '(outline-3 ((((class color) (min-colors 89)) (:inherit nil :foreground "#ebbbff"))))
 '(outline-4 ((((class color) (min-colors 89)) (:inherit nil :foreground "#99ffff"))))
 '(outline-5 ((((class color) (min-colors 89)) (:inherit nil :foreground "#ffc58f"))))
 '(outline-6 ((((class color) (min-colors 89)) (:inherit nil :foreground "#bbdaff"))))
 '(outline-7 ((((class color) (min-colors 89)) (:inherit nil :foreground "#ffeead"))))
 '(outline-8 ((((class color) (min-colors 89)) (:inherit nil :foreground "#ebbbff"))))
 '(outline-9 ((((class color) (min-colors 89)) (:inherit nil :foreground "#99ffff"))))
 '(mu4e-header-highlight-face ((((class color) (min-colors 89)) (:underline nil :inherit region))))
 '(mu4e-header-marks-face ((((class color) (min-colors 89)) (:underline nil :foreground "#ffeead"))))
 '(mu4e-flagged-face ((((class color) (min-colors 89)) (:foreground "#ffc58f" :inherit nil))))
 '(mu4e-replied-face ((((class color) (min-colors 89)) (:foreground "#bbdaff" :inherit nil))))
 '(mu4e-unread-face ((((class color) (min-colors 89)) (:foreground "#ffeead" :inherit nil))))
 '(mu4e-cited-1-face ((((class color) (min-colors 89)) (:inherit outline-1 :slant normal))))
 '(mu4e-cited-2-face ((((class color) (min-colors 89)) (:inherit outline-2 :slant normal))))
 '(mu4e-cited-3-face ((((class color) (min-colors 89)) (:inherit outline-3 :slant normal))))
 '(mu4e-cited-4-face ((((class color) (min-colors 89)) (:inherit outline-4 :slant normal))))
 '(mu4e-cited-5-face ((((class color) (min-colors 89)) (:inherit outline-5 :slant normal))))
 '(mu4e-cited-6-face ((((class color) (min-colors 89)) (:inherit outline-6 :slant normal))))
 '(mu4e-cited-7-face ((((class color) (min-colors 89)) (:inherit outline-7 :slant normal))))
 '(mu4e-ok-face ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(mu4e-view-contact-face ((((class color) (min-colors 89)) (:inherit nil :foreground "#ffeead"))))
 '(mu4e-view-link-face ((((class color) (min-colors 89)) (:inherit link :foreground "#bbdaff"))))
 '(mu4e-view-url-number-face ((((class color) (min-colors 89)) (:inherit nil :foreground "#99ffff"))))
 '(mu4e-view-attach-number-face ((((class color) (min-colors 89)) (:inherit nil :foreground "#ffc58f"))))
 '(mu4e-highlight-face ((((class color) (min-colors 89)) (:inherit highlight))))
 '(mu4e-title-face ((((class color) (min-colors 89)) (:inherit nil :foreground "#d1f1a9"))))
 '(gnus-cite-1 ((((class color) (min-colors 89)) (:inherit outline-1 :foreground nil))))
 '(gnus-cite-2 ((((class color) (min-colors 89)) (:inherit outline-2 :foreground nil))))
 '(gnus-cite-3 ((((class color) (min-colors 89)) (:inherit outline-3 :foreground nil))))
 '(gnus-cite-4 ((((class color) (min-colors 89)) (:inherit outline-4 :foreground nil))))
 '(gnus-cite-5 ((((class color) (min-colors 89)) (:inherit outline-5 :foreground nil))))
 '(gnus-cite-6 ((((class color) (min-colors 89)) (:inherit outline-6 :foreground nil))))
 '(gnus-cite-7 ((((class color) (min-colors 89)) (:inherit outline-7 :foreground nil))))
 '(gnus-cite-8 ((((class color) (min-colors 89)) (:inherit outline-8 :foreground nil))))
 '(gnus-header-content ((((class color) (min-colors 89)) (:inherit message-header-other))))
 '(gnus-header-subject ((((class color) (min-colors 89)) (:inherit message-header-subject))))
 '(gnus-header-from ((((class color) (min-colors 89)) (:inherit message-header-other-face :weight bold :foreground "#ffc58f"))))
 '(gnus-header-name ((((class color) (min-colors 89)) (:inherit message-header-name))))
 '(gnus-button ((((class color) (min-colors 89)) (:inherit link :foreground nil))))
 '(gnus-signature ((((class color) (min-colors 89)) (:inherit font-lock-comment-face))))
 '(gnus-summary-normal-unread ((((class color) (min-colors 89)) (:foreground "#bbdaff" :weight normal))))
 '(gnus-summary-normal-read ((((class color) (min-colors 89)) (:foreground "#ffffff" :weight normal))))
 '(gnus-summary-normal-ancient ((((class color) (min-colors 89)) (:foreground "#99ffff" :weight normal))))
 '(gnus-summary-normal-ticked ((((class color) (min-colors 89)) (:foreground "#ffc58f" :weight normal))))
 '(gnus-summary-low-unread ((((class color) (min-colors 89)) (:foreground "#7285b7" :weight normal))))
 '(gnus-summary-low-read ((((class color) (min-colors 89)) (:foreground "#7285b7" :weight normal))))
 '(gnus-summary-low-ancient ((((class color) (min-colors 89)) (:foreground "#7285b7" :weight normal))))
 '(gnus-summary-high-unread ((((class color) (min-colors 89)) (:foreground "#ffeead" :weight normal))))
 '(gnus-summary-high-read ((((class color) (min-colors 89)) (:foreground "#d1f1a9" :weight normal))))
 '(gnus-summary-high-ancient ((((class color) (min-colors 89)) (:foreground "#d1f1a9" :weight normal))))
 '(gnus-summary-high-ticked ((((class color) (min-colors 89)) (:foreground "#ffc58f" :weight normal))))
 '(gnus-summary-cancelled ((((class color) (min-colors 89)) (:foreground "#ff9da4" :background nil :weight normal))))
 '(gnus-group-mail-low ((((class color) (min-colors 89)) (:foreground "#7285b7"))))
 '(gnus-group-mail-low-empty ((((class color) (min-colors 89)) (:foreground "#7285b7"))))
 '(gnus-group-mail-1 ((((class color) (min-colors 89)) (:foreground nil :weight normal :inherit outline-1))))
 '(gnus-group-mail-2 ((((class color) (min-colors 89)) (:foreground nil :weight normal :inherit outline-2))))
 '(gnus-group-mail-3 ((((class color) (min-colors 89)) (:foreground nil :weight normal :inherit outline-3))))
 '(gnus-group-mail-4 ((((class color) (min-colors 89)) (:foreground nil :weight normal :inherit outline-4))))
 '(gnus-group-mail-5 ((((class color) (min-colors 89)) (:foreground nil :weight normal :inherit outline-5))))
 '(gnus-group-mail-6 ((((class color) (min-colors 89)) (:foreground nil :weight normal :inherit outline-6))))
 '(gnus-group-mail-1-empty ((((class color) (min-colors 89)) (:inherit gnus-group-mail-1 :foreground "#7285b7"))))
 '(gnus-group-mail-2-empty ((((class color) (min-colors 89)) (:inherit gnus-group-mail-2 :foreground "#7285b7"))))
 '(gnus-group-mail-3-empty ((((class color) (min-colors 89)) (:inherit gnus-group-mail-3 :foreground "#7285b7"))))
 '(gnus-group-mail-4-empty ((((class color) (min-colors 89)) (:inherit gnus-group-mail-4 :foreground "#7285b7"))))
 '(gnus-group-mail-5-empty ((((class color) (min-colors 89)) (:inherit gnus-group-mail-5 :foreground "#7285b7"))))
 '(gnus-group-mail-6-empty ((((class color) (min-colors 89)) (:inherit gnus-group-mail-6 :foreground "#7285b7"))))
 '(gnus-group-news-1 ((((class color) (min-colors 89)) (:foreground nil :weight normal :inherit outline-5))))
 '(gnus-group-news-2 ((((class color) (min-colors 89)) (:foreground nil :weight normal :inherit outline-6))))
 '(gnus-group-news-3 ((((class color) (min-colors 89)) (:foreground nil :weight normal :inherit outline-7))))
 '(gnus-group-news-4 ((((class color) (min-colors 89)) (:foreground nil :weight normal :inherit outline-8))))
 '(gnus-group-news-5 ((((class color) (min-colors 89)) (:foreground nil :weight normal :inherit outline-1))))
 '(gnus-group-news-6 ((((class color) (min-colors 89)) (:foreground nil :weight normal :inherit outline-2))))
 '(gnus-group-news-1-empty ((((class color) (min-colors 89)) (:inherit gnus-group-news-1 :foreground "#7285b7"))))
 '(gnus-group-news-2-empty ((((class color) (min-colors 89)) (:inherit gnus-group-news-2 :foreground "#7285b7"))))
 '(gnus-group-news-3-empty ((((class color) (min-colors 89)) (:inherit gnus-group-news-3 :foreground "#7285b7"))))
 '(gnus-group-news-4-empty ((((class color) (min-colors 89)) (:inherit gnus-group-news-4 :foreground "#7285b7"))))
 '(gnus-group-news-5-empty ((((class color) (min-colors 89)) (:inherit gnus-group-news-5 :foreground "#7285b7"))))
 '(gnus-group-news-6-empty ((((class color) (min-colors 89)) (:inherit gnus-group-news-6 :foreground "#7285b7"))))
 '(erc-direct-msg-face ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(erc-error-face ((((class color) (min-colors 89)) (:foreground "#ff9da4"))))
 '(erc-header-face ((((class color) (min-colors 89)) (:foreground "#ffffff" :background "#003f8e"))))
 '(erc-input-face ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(erc-current-nick-face ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(erc-my-nick-face ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(erc-nick-default-face ((((class color) (min-colors 89)) (:weight normal :foreground "#ebbbff"))))
 '(erc-nick-msg-face ((((class color) (min-colors 89)) (:weight normal :foreground "#ffeead"))))
 '(erc-notice-face ((((class color) (min-colors 89)) (:foreground "#7285b7"))))
 '(erc-pal-face ((((class color) (min-colors 89)) (:foreground "#ffc58f"))))
 '(erc-prompt-face ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(erc-timestamp-face ((((class color) (min-colors 89)) (:foreground "#99ffff"))))
 '(erc-keyword-face ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(custom-variable-tag ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(custom-group-tag ((((class color) (min-colors 89)) (:foreground "#bbdaff"))))
 '(custom-state ((((class color) (min-colors 89)) (:foreground "#d1f1a9"))))
 '(term ((((class color) (min-colors 89)) (:foreground nil :background nil :inherit default))))
 '(term-color-black ((((class color) (min-colors 89)) (:foreground "#ffffff" :background "#ffffff"))))
 '(term-color-red ((((class color) (min-colors 89)) (:foreground "#ff9da4" :background "#ff9da4"))))
 '(term-color-green ((((class color) (min-colors 89)) (:foreground "#d1f1a9" :background "#d1f1a9"))))
 '(term-color-yellow ((((class color) (min-colors 89)) (:foreground "#ffeead" :background "#ffeead"))))
 '(term-color-blue ((((class color) (min-colors 89)) (:foreground "#bbdaff" :background "#bbdaff"))))
 '(term-color-magenta ((((class color) (min-colors 89)) (:foreground "#ebbbff" :background "#ebbbff"))))
 '(term-color-cyan ((((class color) (min-colors 89)) (:foreground "#99ffff" :background "#99ffff"))))
 '(term-color-white ((((class color) (min-colors 89)) (:foreground "#002451" :background "#002451")))))

(provide-theme 'tomorrow-night-blue-chap)
